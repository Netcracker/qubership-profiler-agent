<?xml version="1.0" encoding="UTF-8"?>
<profiler-configuration>
    <!-- Uncomment to store transformed class files:
      -->
    <store-transformed-classes>target/profiler-dump</store-transformed-classes>
    <log-retention max-age="8 days" max-size="2 Gb"/>
    <enhancer>test</enhancer>
    <ruleset>
        <rule>
            <class>com.netcracker.profiler.test.MethodCodeTest</class>
            <method>test_nf_re_fin</method>
            <execute-when duration-exeeds="0">addedMethod$profiler(p1)</execute-when>
            <execute-after>addedMethod$profiler(p1)</execute-after>
            <!--<do-not-profile/>-->
        </rule>
    </ruleset>
    <ruleset>
        <rule>
            <class>com.netcracker.profiler.test.MethodCodeTest</class>
            <!--<do-not-profile/>-->
        </rule>
    </ruleset>

    <add-default-implementation class="com.netcracker.profiler.test.pigs.TransactionPig" methodName="getCause"
                                methodDescr="()Ljava/lang/Throwable;"/>

    <ruleset>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ChangeStructurePig</class>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.TransactionPig</class>
            <method>getStatusAsString</method>
            <execute-instead return="java.lang.String">getStatusAsString$profiler</execute-instead>
            <do-not-profile/>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.TransactionPig</class>
            <method>getCause</method>
            <execute-instead return="java.lang.Throwable">getCause$profiler</execute-instead>
            <do-not-profile/>
        </rule>
    </ruleset>

    <ruleset>
        <rule>
            <class>com.netcracker.profiler.test.pigs.LogParameterPig</class>
            <method>stringArg</method>
            <log-parameter name="parameter.string">0</log-parameter>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.LogParameterPig</class>
            <method>intArg</method>
            <log-parameter name="parameter.int">0</log-parameter>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.LogParameterPig</class>
            <method>staticInt</method>
            <log-parameter name="parameter.staticInt">0</log-parameter>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.LogParameterPig</class>
            <method>staticIntDouble</method>
            <log-parameter name="parameter.staticInt">0</log-parameter>
            <log-parameter name="parameter.staticDouble">1</log-parameter>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.LogParameterPig</class>
            <method>shiftsTime</method>
            <log-parameter-when duration-exceeds="500" name="parameter.double">1</log-parameter-when>
            <log-parameter-when duration-exceeds="2000" name="parameter.int">0</log-parameter-when>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.LogParameterPig$B</class>
            <method>&lt;init&gt;(int)</method>
            <log-parameter name="parameter.int">0</log-parameter>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.LogParameterPig</class>
            <method>returnsDouble</method>
            <log-return name="return.double500"/>
            <log-return-when duration-exceeds="2000" name="return.double2000"/>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.LogParameterPig</class>
            <method>returnsByte</method>
            <log-return-when duration-exceeds="500" name="return.byte500"/>
            <log-return-when duration-exceeds="2000" name="return.byte2000"/>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.LogParameterPig</class>
            <method>throwsException</method>
            <log-parameter-when duration-exceeds="100" name="param.gt100">0</log-parameter-when>
        </rule>
    </ruleset>

    <ruleset>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ExecuteMethodPig</class>
            <method>staticExecuteBefore</method>
            <execute-before static="true" type="com/netcracker/profiler/test/pigs/ExecuteMethodPig$Observer">staticMethod2(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10)</execute-before>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ExecuteMethodPig</class>
            <method>staticExecuteAfter</method>
            <execute-after static="true" type="com/netcracker/profiler/test/pigs/ExecuteMethodPig$Observer">staticMethod2(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10)</execute-after>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ExecuteMethodPig</class>
            <method>staticExecuteAfterWithResult</method>
            <execute-after static="true" type="com/netcracker/profiler/test/pigs/ExecuteMethodPig$Observer">staticMethod2(p1,p2,p3,p4,p5,p6,p7,p8,result,p10)</execute-after>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ExecuteMethodPig</class>
            <method>executeInstead</method>
            <execute-instead return="long">executeNewInstead(p1,p2)</execute-instead>
        </rule>
    </ruleset>

    <ruleset>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ExecuteMethodPig</class>
            <method>throwException</method>
            <execute-when static="true" type="com/netcracker/profiler/test/pigs/ExecuteMethodPig$Observer" exception="true">throwException(p1,p2,p3)</execute-when>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ExecuteMethodPig</class>
            <method>throwExceptionOnly</method>
            <execute-when static="true" type="com/netcracker/profiler/test/pigs/ExecuteMethodPig$Observer" exception-only="true">throwExceptionOnly(p1,p2,p3)</execute-when>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ExecuteMethodPig</class>
            <method>throwExceptionJustThrowable</method>
            <execute-when static="true" type="com/netcracker/profiler/test/pigs/ExecuteMethodPig$Observer" exception="true">throwExceptionJustThrowable(throwable)</execute-when>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ExecuteMethodPig</class>
            <method>throwExceptionJustThrowable2</method>
            <execute-when static="true" type="com/netcracker/profiler/test/pigs/ExecuteMethodPig$Observer" exception="true">throwExceptionJustThrowable</execute-when>
        </rule>
    </ruleset>

    <ruleset>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ProcessArgumentPig</class>
            <method>intArg(int)</method>
            <process-argument argument="0">processInt$profiler(p1)</process-argument>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.ProcessArgumentPig</class>
            <method>mapArg(Map)</method>
            <process-argument argument="0">processMap$profiler(p1)</process-argument>
        </rule>
        <rule>
            <class>com.netcracker.profiler.test.pigs.TestRes</class>
            <method>&lt;init&gt;(String)</method>
            <process-argument argument="0">processRes$profiler(p1)</process-argument>
        </rule>
    </ruleset>

    <metrics-collection>
        <call-type output-type="login_jsp">
            <matching class="weblogic.servlet.internal.ServletRequestImpl" method="run"/>
            <metrics>
                <count/>
                <duration/>
            </metrics>
            <filters>
                <or>
                    <input-param name="web.url" endsWith="login.jsp"/>
                    <input-param name="web.url" startsWith="login.jsp"/>
                    <input-param name="web.url" contains="login.jsp"/>
                    <input-param name="web.url" exact="login.jsp"/>
                    <not>
                        <input-param name="tui.tab" exact="_Price Enquiry"/>
                        <input-param name="tui.tab" exact="_Tariff Enquiry"/>
                        <input-param name="tui.tab" exact="_CPAs"/>
                    </not>
                </or>
            </filters>
        </call-type>

        <call-type output-type="tabs_navigation">
            <matching class="weblogic.servlet.internal.ServletRequestImpl" method="run"/>
            <aggregation-params>
                <input-param name="user"/>
                <input-param name="tui.tab" display-name="tui_tab"/>
            </aggregation-params>
            <metrics>
                <duration/>
            </metrics>
            <filters>
                <or>
                    <input-param name="tui.tab" exact="_Price Enquiry"/>
                    <input-param name="tui.tab" exact="_Tariff Enquiry"/>
                    <input-param name="tui.tab" exact="_CPAs"/>
                    <input-param name="tui.tab" exact="_Accounts"/>
                    <input-param name="tui.tab" exact="_Customized PIDs"/>
                    <input-param name="tui.tab" exact="_Composite PIDs"/>
                    <input-param name="tui.tab" exact="_Pre-Defined PIDs"/>
                    <input-param name="tui.tab" exact="_Published PID"/>
                    <input-param name="tui.tab" exact="_Catalogues"/>
                    <input-param name="tui.tab" exact="_Tax Authorities"/>
                    <input-param name="tui.tab" exact="_Tax Rules"/>
                    <input-param name="tui.tab" exact="_Transit Groups"/>
                    <input-param name="tui.tab" exact="_Applicability Group"/>
                    <input-param name="tui.tab" exact="_Exemptions %26 Exceptions %26 Allocations"/>
                    <input-param name="tui.tab" exact="_Configuration Status"/>
                    <input-param name="tui.tab" exact="_Zoning"/>
                    <input-param name="tui.tab" exact="_Rates"/>
                    <input-param name="tui.tab" exact="_Special Lane Groups"/>
                    <input-param name="tui.tab" exact="_Discounts"/>
                    <input-param name="tui.tab" exact="_Services and Surcharges"/>
                    <input-param name="tui.tab" exact="_Publication"/>
                    <input-param name="tui.tab" exact="_Other"/>
                    <input-param name="tui.tab" exact="_PID Overview"/>
                    <input-param name="tui.tab" exact="_Requests"/>
                    <input-param name="tui.tab" exact="_Retention"/>
                </or>
                <not>
                    <input-param name="web.url" endsWith="login.jsp"/>
                </not>
            </filters>
        </call-type>

        <call-type output-type="all_http_requests">
            <matching class="weblogic.servlet.internal.ServletRequestImpl" method="run"/>
            <metrics>
                <count/>
                <duration/>
            </metrics>
        </call-type>

        <call-type output-type="ui_objects_maintenance" is-custom="true">
            <matching class="customMetric"/>
            <aggregation-params>
                <input-param name="user"/>
                <input-param name="action"/>
                <input-param name="operation"/>
            </aggregation-params>
            <metrics>
                <duration lowestDiscernibleValue="1" highestTrackableValue="10000000" numberOfSignificantValueDigits="3"/>
            </metrics>
        </call-type>
    </metrics-collection>

    <call-export>
        <host>1.2.3.4</host>
        <port>9856</port>
        <socket-timeout>10000</socket-timeout>
        <include-params>
            <include-param>start.timestamp</include-param>
            <include-param>web.url</include-param>
        </include-params>
        <exclude-params>
            <exclude-param>job.name</exclude-param>
            <exclude-param>time.queue.wait</exclude-param>
        </exclude-params>
    </call-export>
</profiler-configuration>
